# our CI/CD workflow .yaml file

name: CI/CD workflow

on:
  workflow_dispatch:
    inputs:
      steps:
        description: 'Specify which pipeline stages to run: "integration" for checks/tests, "all" for the full pipeline including deployment.'
        required: true
        type: choice
        options:
          - integration
          - all
        default: 'all'
jobs:
   integration:
      # Run integration job if 'steps' input is 'all' or 'integration'
      if: ${{ inputs.steps == 'all' || inputs.steps == 'integration' }}
      name: checks_and_tests
      runs-on: ubuntu-latest
      steps:
         - name: Checkout code repo
           # this action clones current repository to the VM where our job is running
           # https://github.com/actions/checkout
           uses: actions/checkout@v4
           
         - name: Setup uv
           run: curl -LsSf https://astral.sh/uv/install.sh | sh
           
         - name: Install dependencies
           run: uv sync --group integration
           
         - name: Run ruff check
           run: uv run ruff check
           
         - name: Run pip-audit
           run: uv run pip-audit --vulnerability-service pypi

         - name: Run PyTest
           run: uv run pytest tests
   deployment:
      name: onnx-model-pipeline # Meaningful name for the ONNX model processing job
      runs-on: ubuntu-latest     # Appropriate image for the job
      # Deployment job depends on successful completion of integration job
      # and runs only if 'steps' input is 'all' and integration job was successful.
      needs: integration         # Ensures this job runs only if 'integration' job succeeds
      if: ${{ inputs.steps == 'all' && needs.integration.result == 'success' }}
      steps:
         - name: Checkout code repo
           uses: actions/checkout@v4

         - name: Setup uv
           run: curl -LsSf https://astral.sh/uv/install.sh | sh

         - name: Install deployment dependencies
           # Installs only dependencies from the [tool.uv.sources.deployment] group in pyproject.toml
           run: uv sync --group deployment

         - name: Download model artifacts

           # Runs src/main.py --script download, as per lab instructions
           run: uv run python main.py --script download

         - name: Export model to ONNX

           # Runs main.py --script export, as per lab instructions
           run: uv run python main.py --script export

         - name: Build Docker image
           # Builds the Docker image using the Dockerfile in the repository root
           run: docker build -t polish-sentiment-app-onnx:latest .

         - name: Set up AWS credentials
           uses: aws-actions/configure-aws-credentials@v1 # As specified in HOMEWORK.md
           with:
             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # Include if your credentials use it
             aws-region: us-east-1 

         - name: Login to ECR
           id: login-ecr
           uses: aws-actions/amazon-ecr-login@v2 
           with:
             mask-password: 'true'

         - name: Push Docker image
           env:
             REGISTRY: ${{ steps.login-ecr.outputs.registry }}
             REPOSITORY: secrets 
             IMAGE_TAG: ${{ github.sha }}
           run: |
             echo "Tagging image polish-sentiment-app-onnx:latest as $REGISTRY/$REPOSITORY:$IMAGE_TAG"
             docker tag polish-sentiment-app-onnx:latest $REGISTRY/$REPOSITORY:$IMAGE_TAG
             echo "Pushing image $REGISTRY/$REPOSITORY:$IMAGE_TAG to ECR"
             docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG